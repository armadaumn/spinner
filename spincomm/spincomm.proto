syntax = "proto3";

package spincomm;

option go_package = "github.com/CodyPerakslis/armadanet/spinner/spincomm";

service Spinner {
    rpc Attach (JoinRequest) returns (stream TaskRequest);
    rpc Run (stream TaskLog) returns (TaskCompletion); 
    rpc Request (TaskRequest) returns (stream TaskLog);
    rpc Update (NodeInfo) returns (PingResp);
    rpc RegisterScheduler (SchedulePolicy) returns (PingResp);
}

message UUID {
    string value = 1;
}

message JoinRequest {
    UUID captain_id = 1;
    string IP = 2;
    string port = 3;
    double lat = 4;
    double lon = 5;
    Type type = 6;
    repeated string tags = 7;
}

enum Type {
    Volunteer = 0;
    LocalServer = 1;
}


// Task Requirement
message TaskLimits {
    int64 cpu_shares = 1;
    int64 memory = 2;
}

message TaskRequest {
    UUID app_id = 1;
    string image = 2;
    repeated string command = 3;
    bool tty = 4;
    string name = 5;
    repeated string env = 6;
    int64 port = 7;
    TaskLimits limits = 8;
    TaskSpec taskspec = 9;
    UUID task_id = 10;
}

message TaskLog {
    UUID task_id = 1;
    string ip = 2;
    string port = 3;
    map<string, ResourceStatus> host_resource = 4;
    Location location = 5;
    repeated string tag = 6;
    int64 node_type = 7;
    map<string, double> containerUtilization = 8;
}

message TaskCompletion {
}


// For captain running status
message ResourceStatus {
    int64 total = 1;
    int64 assigned = 2;
    int64 unassigned = 3;
    double available = 4;
}

message HostRC {
    ResourceStatus CPU = 1;
    ResourceStatus Memory = 2;
    string GPU = 3;
}

message ContainerStatus {
    repeated string activeContainer = 1;
    repeated string images = 2;
}

message NodeInfo {
    UUID captain_id = 1;
    map<string, ResourceStatus> host_resource = 2;
    map<string, string> used_ports = 3;
    ContainerStatus container_status = 4;
    repeated string appIDs = 5;
    repeated string taskIDs = 6;
    map<string, string> layers = 7;
    map<string, double> containerUtilization = 8;
}


// For requesters
message TaskSpec {
    repeated string Filters = 1;
    string  Sort = 2;
    map<string, ResourceRequirement> ResourceMap = 3;
    map<string, string> Ports = 4;
    bool IsPublic = 5;
    int64 NumReplicas = 6;
    CargoReq CargoSpec = 7;
    Location DataSources = 8;
    repeated string Tags = 9;
    string image = 10;
    string imageVersion = 11;
}

message ResourceRequirement {
    int64 Requested = 1;
    double Weight = 2;
    bool Required = 3;
}

message Location {
    double lat = 1;
    double lon = 2;
}

message PingResp {
    bool status = 1;
}

message CargoReq {
    int64 Size = 1;
    int64 nReplica = 2;
    repeated string IPs = 3;
    repeated string Ports = 4;
}

// Customize scheduler interface
message SchedulePolicy {
    string id = 1;
    string type = 2;
    string IP = 3;
    string port = 4;
}