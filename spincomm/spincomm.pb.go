// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: spincomm.proto

package spincomm

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Type int32

const (
	Type_Volunteer   Type = 0
	Type_LocalServer Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "Volunteer",
		1: "LocalServer",
	}
	Type_value = map[string]int32{
		"Volunteer":   0,
		"LocalServer": 1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_spincomm_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_spincomm_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{0}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptainId *UUID    `protobuf:"bytes,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	IP        string   `protobuf:"bytes,2,opt,name=IP,proto3" json:"IP,omitempty"`
	Port      string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	Lat       float64  `protobuf:"fixed64,4,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon       float64  `protobuf:"fixed64,5,opt,name=lon,proto3" json:"lon,omitempty"`
	Type      Type     `protobuf:"varint,6,opt,name=type,proto3,enum=spincomm.Type" json:"type,omitempty"`
	Tags      []string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{1}
}

func (x *JoinRequest) GetCaptainId() *UUID {
	if x != nil {
		return x.CaptainId
	}
	return nil
}

func (x *JoinRequest) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *JoinRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *JoinRequest) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *JoinRequest) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *JoinRequest) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_Volunteer
}

func (x *JoinRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Task Requirement
type TaskLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuShares int64 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	Memory    int64 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *TaskLimits) Reset() {
	*x = TaskLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLimits) ProtoMessage() {}

func (x *TaskLimits) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLimits.ProtoReflect.Descriptor instead.
func (*TaskLimits) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{2}
}

func (x *TaskLimits) GetCpuShares() int64 {
	if x != nil {
		return x.CpuShares
	}
	return 0
}

func (x *TaskLimits) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    *UUID       `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Image    string      `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Command  []string    `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	Tty      bool        `protobuf:"varint,4,opt,name=tty,proto3" json:"tty,omitempty"`
	Name     string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Env      []string    `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty"`
	Port     int64       `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	Limits   *TaskLimits `protobuf:"bytes,8,opt,name=limits,proto3" json:"limits,omitempty"`
	Taskspec *TaskSpec   `protobuf:"bytes,9,opt,name=taskspec,proto3" json:"taskspec,omitempty"`
	TaskId   *UUID       `protobuf:"bytes,10,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{3}
}

func (x *TaskRequest) GetAppId() *UUID {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *TaskRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TaskRequest) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TaskRequest) GetTty() bool {
	if x != nil {
		return x.Tty
	}
	return false
}

func (x *TaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRequest) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskRequest) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TaskRequest) GetLimits() *TaskLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *TaskRequest) GetTaskspec() *TaskSpec {
	if x != nil {
		return x.Taskspec
	}
	return nil
}

func (x *TaskRequest) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

type TaskLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId         *UUID                      `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Ip             string                     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port           string                     `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	HostResource   map[string]*ResourceStatus `protobuf:"bytes,4,rep,name=host_resource,json=hostResource,proto3" json:"host_resource,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Location       *Location                  `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Tag            []string                   `protobuf:"bytes,6,rep,name=tag,proto3" json:"tag,omitempty"`
	NodeType       int64                      `protobuf:"varint,7,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	CpuUtilization float64                    `protobuf:"fixed64,8,opt,name=cpuUtilization,proto3" json:"cpuUtilization,omitempty"`
	AssignedCpu    int64                      `protobuf:"varint,9,opt,name=assignedCpu,proto3" json:"assignedCpu,omitempty"`
}

func (x *TaskLog) Reset() {
	*x = TaskLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLog) ProtoMessage() {}

func (x *TaskLog) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLog.ProtoReflect.Descriptor instead.
func (*TaskLog) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{4}
}

func (x *TaskLog) GetTaskId() *UUID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskLog) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TaskLog) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TaskLog) GetHostResource() map[string]*ResourceStatus {
	if x != nil {
		return x.HostResource
	}
	return nil
}

func (x *TaskLog) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TaskLog) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *TaskLog) GetNodeType() int64 {
	if x != nil {
		return x.NodeType
	}
	return 0
}

func (x *TaskLog) GetCpuUtilization() float64 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *TaskLog) GetAssignedCpu() int64 {
	if x != nil {
		return x.AssignedCpu
	}
	return 0
}

type TaskCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskCompletion) Reset() {
	*x = TaskCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCompletion) ProtoMessage() {}

func (x *TaskCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCompletion.ProtoReflect.Descriptor instead.
func (*TaskCompletion) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{5}
}

// For captain running status
type ResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Assigned   int64   `protobuf:"varint,2,opt,name=assigned,proto3" json:"assigned,omitempty"`
	Unassigned int64   `protobuf:"varint,3,opt,name=unassigned,proto3" json:"unassigned,omitempty"`
	Available  float64 `protobuf:"fixed64,4,opt,name=available,proto3" json:"available,omitempty"`
}

func (x *ResourceStatus) Reset() {
	*x = ResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatus) ProtoMessage() {}

func (x *ResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatus.ProtoReflect.Descriptor instead.
func (*ResourceStatus) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceStatus) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ResourceStatus) GetAssigned() int64 {
	if x != nil {
		return x.Assigned
	}
	return 0
}

func (x *ResourceStatus) GetUnassigned() int64 {
	if x != nil {
		return x.Unassigned
	}
	return 0
}

func (x *ResourceStatus) GetAvailable() float64 {
	if x != nil {
		return x.Available
	}
	return 0
}

type HostRC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPU    *ResourceStatus `protobuf:"bytes,1,opt,name=CPU,proto3" json:"CPU,omitempty"`
	Memory *ResourceStatus `protobuf:"bytes,2,opt,name=Memory,proto3" json:"Memory,omitempty"`
	GPU    string          `protobuf:"bytes,3,opt,name=GPU,proto3" json:"GPU,omitempty"`
}

func (x *HostRC) Reset() {
	*x = HostRC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostRC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostRC) ProtoMessage() {}

func (x *HostRC) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostRC.ProtoReflect.Descriptor instead.
func (*HostRC) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{7}
}

func (x *HostRC) GetCPU() *ResourceStatus {
	if x != nil {
		return x.CPU
	}
	return nil
}

func (x *HostRC) GetMemory() *ResourceStatus {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *HostRC) GetGPU() string {
	if x != nil {
		return x.GPU
	}
	return ""
}

type ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveContainer []string `protobuf:"bytes,1,rep,name=activeContainer,proto3" json:"activeContainer,omitempty"`
	Images          []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{8}
}

func (x *ContainerStatus) GetActiveContainer() []string {
	if x != nil {
		return x.ActiveContainer
	}
	return nil
}

func (x *ContainerStatus) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptainId            *UUID                      `protobuf:"bytes,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	HostResource         map[string]*ResourceStatus `protobuf:"bytes,2,rep,name=host_resource,json=hostResource,proto3" json:"host_resource,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UsedPorts            map[string]string          `protobuf:"bytes,3,rep,name=used_ports,json=usedPorts,proto3" json:"used_ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContainerStatus      *ContainerStatus           `protobuf:"bytes,4,opt,name=container_status,json=containerStatus,proto3" json:"container_status,omitempty"`
	AppIDs               []string                   `protobuf:"bytes,5,rep,name=appIDs,proto3" json:"appIDs,omitempty"`
	TaskIDs              []string                   `protobuf:"bytes,6,rep,name=taskIDs,proto3" json:"taskIDs,omitempty"`
	Layers               map[string]string          `protobuf:"bytes,7,rep,name=layers,proto3" json:"layers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContainerUtilization map[string]float64         `protobuf:"bytes,8,rep,name=containerUtilization,proto3" json:"containerUtilization,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	AssignedCpu          map[string]int64           `protobuf:"bytes,9,rep,name=assignedCpu,proto3" json:"assignedCpu,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{9}
}

func (x *NodeInfo) GetCaptainId() *UUID {
	if x != nil {
		return x.CaptainId
	}
	return nil
}

func (x *NodeInfo) GetHostResource() map[string]*ResourceStatus {
	if x != nil {
		return x.HostResource
	}
	return nil
}

func (x *NodeInfo) GetUsedPorts() map[string]string {
	if x != nil {
		return x.UsedPorts
	}
	return nil
}

func (x *NodeInfo) GetContainerStatus() *ContainerStatus {
	if x != nil {
		return x.ContainerStatus
	}
	return nil
}

func (x *NodeInfo) GetAppIDs() []string {
	if x != nil {
		return x.AppIDs
	}
	return nil
}

func (x *NodeInfo) GetTaskIDs() []string {
	if x != nil {
		return x.TaskIDs
	}
	return nil
}

func (x *NodeInfo) GetLayers() map[string]string {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *NodeInfo) GetContainerUtilization() map[string]float64 {
	if x != nil {
		return x.ContainerUtilization
	}
	return nil
}

func (x *NodeInfo) GetAssignedCpu() map[string]int64 {
	if x != nil {
		return x.AssignedCpu
	}
	return nil
}

// For requesters
type TaskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters      []string                        `protobuf:"bytes,1,rep,name=Filters,proto3" json:"Filters,omitempty"`
	Sort         string                          `protobuf:"bytes,2,opt,name=Sort,proto3" json:"Sort,omitempty"`
	ResourceMap  map[string]*ResourceRequirement `protobuf:"bytes,3,rep,name=ResourceMap,proto3" json:"ResourceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports        map[string]string               `protobuf:"bytes,4,rep,name=Ports,proto3" json:"Ports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsPublic     bool                            `protobuf:"varint,5,opt,name=IsPublic,proto3" json:"IsPublic,omitempty"`
	NumReplicas  int64                           `protobuf:"varint,6,opt,name=NumReplicas,proto3" json:"NumReplicas,omitempty"`
	CargoSpec    *CargoReq                       `protobuf:"bytes,7,opt,name=CargoSpec,proto3" json:"CargoSpec,omitempty"`
	DataSources  *Location                       `protobuf:"bytes,8,opt,name=DataSources,proto3" json:"DataSources,omitempty"`
	Tags         []string                        `protobuf:"bytes,9,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Image        string                          `protobuf:"bytes,10,opt,name=image,proto3" json:"image,omitempty"`
	ImageVersion string                          `protobuf:"bytes,11,opt,name=imageVersion,proto3" json:"imageVersion,omitempty"`
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{10}
}

func (x *TaskSpec) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *TaskSpec) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *TaskSpec) GetResourceMap() map[string]*ResourceRequirement {
	if x != nil {
		return x.ResourceMap
	}
	return nil
}

func (x *TaskSpec) GetPorts() map[string]string {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *TaskSpec) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *TaskSpec) GetNumReplicas() int64 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *TaskSpec) GetCargoSpec() *CargoReq {
	if x != nil {
		return x.CargoSpec
	}
	return nil
}

func (x *TaskSpec) GetDataSources() *Location {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *TaskSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *TaskSpec) GetImageVersion() string {
	if x != nil {
		return x.ImageVersion
	}
	return ""
}

type ResourceRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requested int64   `protobuf:"varint,1,opt,name=Requested,proto3" json:"Requested,omitempty"`
	Weight    float64 `protobuf:"fixed64,2,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Required  bool    `protobuf:"varint,3,opt,name=Required,proto3" json:"Required,omitempty"`
}

func (x *ResourceRequirement) Reset() {
	*x = ResourceRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirement) ProtoMessage() {}

func (x *ResourceRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirement.ProtoReflect.Descriptor instead.
func (*ResourceRequirement) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{11}
}

func (x *ResourceRequirement) GetRequested() int64 {
	if x != nil {
		return x.Requested
	}
	return 0
}

func (x *ResourceRequirement) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ResourceRequirement) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{12}
}

func (x *Location) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Location) GetLon() float64 {
	if x != nil {
		return x.Lon
	}
	return 0
}

type PingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PingResp) Reset() {
	*x = PingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResp) ProtoMessage() {}

func (x *PingResp) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResp.ProtoReflect.Descriptor instead.
func (*PingResp) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{13}
}

func (x *PingResp) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type CargoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     int64    `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
	NReplica int64    `protobuf:"varint,2,opt,name=nReplica,proto3" json:"nReplica,omitempty"`
	IPs      []string `protobuf:"bytes,3,rep,name=IPs,proto3" json:"IPs,omitempty"`
	Ports    []string `protobuf:"bytes,4,rep,name=Ports,proto3" json:"Ports,omitempty"`
}

func (x *CargoReq) Reset() {
	*x = CargoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CargoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CargoReq) ProtoMessage() {}

func (x *CargoReq) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CargoReq.ProtoReflect.Descriptor instead.
func (*CargoReq) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{14}
}

func (x *CargoReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CargoReq) GetNReplica() int64 {
	if x != nil {
		return x.NReplica
	}
	return 0
}

func (x *CargoReq) GetIPs() []string {
	if x != nil {
		return x.IPs
	}
	return nil
}

func (x *CargoReq) GetPorts() []string {
	if x != nil {
		return x.Ports
	}
	return nil
}

// Customize scheduler interface
type SchedulePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IP   string `protobuf:"bytes,3,opt,name=IP,proto3" json:"IP,omitempty"`
	Port string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SchedulePolicy) Reset() {
	*x = SchedulePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spincomm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulePolicy) ProtoMessage() {}

func (x *SchedulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_spincomm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulePolicy.ProtoReflect.Descriptor instead.
func (*SchedulePolicy) Descriptor() ([]byte, []int) {
	return file_spincomm_proto_rawDescGZIP(), []int{15}
}

func (x *SchedulePolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchedulePolicy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SchedulePolicy) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *SchedulePolicy) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

var File_spincomm_proto protoreflect.FileDescriptor

var file_spincomm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x09, 0x63, 0x61,
	0x70, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x75, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xb7, 0x02, 0x0a,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x74, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x70, 0x65, 0x63, 0x12, 0x27, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xa4, 0x03, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x48, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x55,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x70, 0x75, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43,
	0x70, 0x75, 0x1a, 0x59, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x10, 0x0a,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x78, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x43, 0x12, 0x2a, 0x0a, 0x03,
	0x43, 0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x30, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50,
	0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x47, 0x50, 0x55, 0x22, 0x53, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x22, 0xfc, 0x06, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d,
	0x0a, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x09, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x70, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x70, 0x75, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x70,
	0x75, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x70, 0x75, 0x1a, 0x59, 0x0a, 0x11, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x70, 0x75, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc1, 0x04, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x52, 0x09, 0x43, 0x61,
	0x72, 0x67, 0x6f, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x5d, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x2e, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x22, 0x22, 0x0a,
	0x08, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x62, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x50, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x2a,
	0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6e,
	0x74, 0x65, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x01, 0x32, 0xa5, 0x02, 0x0a, 0x07, 0x53, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x15, 0x2e,
	0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x30, 0x01, 0x12, 0x34, 0x0a,
	0x03, 0x52, 0x75, 0x6e, 0x12, 0x11, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x1a, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x28, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x12, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x11,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x73, 0x70, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x12, 0x2e, 0x73, 0x70,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f,
	0x64, 0x79, 0x50, 0x65, 0x72, 0x61, 0x6b, 0x73, 0x6c, 0x69, 0x73, 0x2f, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x73, 0x70,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spincomm_proto_rawDescOnce sync.Once
	file_spincomm_proto_rawDescData = file_spincomm_proto_rawDesc
)

func file_spincomm_proto_rawDescGZIP() []byte {
	file_spincomm_proto_rawDescOnce.Do(func() {
		file_spincomm_proto_rawDescData = protoimpl.X.CompressGZIP(file_spincomm_proto_rawDescData)
	})
	return file_spincomm_proto_rawDescData
}

var file_spincomm_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spincomm_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_spincomm_proto_goTypes = []interface{}{
	(Type)(0),                   // 0: spincomm.Type
	(*UUID)(nil),                // 1: spincomm.UUID
	(*JoinRequest)(nil),         // 2: spincomm.JoinRequest
	(*TaskLimits)(nil),          // 3: spincomm.TaskLimits
	(*TaskRequest)(nil),         // 4: spincomm.TaskRequest
	(*TaskLog)(nil),             // 5: spincomm.TaskLog
	(*TaskCompletion)(nil),      // 6: spincomm.TaskCompletion
	(*ResourceStatus)(nil),      // 7: spincomm.ResourceStatus
	(*HostRC)(nil),              // 8: spincomm.HostRC
	(*ContainerStatus)(nil),     // 9: spincomm.ContainerStatus
	(*NodeInfo)(nil),            // 10: spincomm.NodeInfo
	(*TaskSpec)(nil),            // 11: spincomm.TaskSpec
	(*ResourceRequirement)(nil), // 12: spincomm.ResourceRequirement
	(*Location)(nil),            // 13: spincomm.Location
	(*PingResp)(nil),            // 14: spincomm.PingResp
	(*CargoReq)(nil),            // 15: spincomm.CargoReq
	(*SchedulePolicy)(nil),      // 16: spincomm.SchedulePolicy
	nil,                         // 17: spincomm.TaskLog.HostResourceEntry
	nil,                         // 18: spincomm.NodeInfo.HostResourceEntry
	nil,                         // 19: spincomm.NodeInfo.UsedPortsEntry
	nil,                         // 20: spincomm.NodeInfo.LayersEntry
	nil,                         // 21: spincomm.NodeInfo.ContainerUtilizationEntry
	nil,                         // 22: spincomm.NodeInfo.AssignedCpuEntry
	nil,                         // 23: spincomm.TaskSpec.ResourceMapEntry
	nil,                         // 24: spincomm.TaskSpec.PortsEntry
}
var file_spincomm_proto_depIdxs = []int32{
	1,  // 0: spincomm.JoinRequest.captain_id:type_name -> spincomm.UUID
	0,  // 1: spincomm.JoinRequest.type:type_name -> spincomm.Type
	1,  // 2: spincomm.TaskRequest.app_id:type_name -> spincomm.UUID
	3,  // 3: spincomm.TaskRequest.limits:type_name -> spincomm.TaskLimits
	11, // 4: spincomm.TaskRequest.taskspec:type_name -> spincomm.TaskSpec
	1,  // 5: spincomm.TaskRequest.task_id:type_name -> spincomm.UUID
	1,  // 6: spincomm.TaskLog.task_id:type_name -> spincomm.UUID
	17, // 7: spincomm.TaskLog.host_resource:type_name -> spincomm.TaskLog.HostResourceEntry
	13, // 8: spincomm.TaskLog.location:type_name -> spincomm.Location
	7,  // 9: spincomm.HostRC.CPU:type_name -> spincomm.ResourceStatus
	7,  // 10: spincomm.HostRC.Memory:type_name -> spincomm.ResourceStatus
	1,  // 11: spincomm.NodeInfo.captain_id:type_name -> spincomm.UUID
	18, // 12: spincomm.NodeInfo.host_resource:type_name -> spincomm.NodeInfo.HostResourceEntry
	19, // 13: spincomm.NodeInfo.used_ports:type_name -> spincomm.NodeInfo.UsedPortsEntry
	9,  // 14: spincomm.NodeInfo.container_status:type_name -> spincomm.ContainerStatus
	20, // 15: spincomm.NodeInfo.layers:type_name -> spincomm.NodeInfo.LayersEntry
	21, // 16: spincomm.NodeInfo.containerUtilization:type_name -> spincomm.NodeInfo.ContainerUtilizationEntry
	22, // 17: spincomm.NodeInfo.assignedCpu:type_name -> spincomm.NodeInfo.AssignedCpuEntry
	23, // 18: spincomm.TaskSpec.ResourceMap:type_name -> spincomm.TaskSpec.ResourceMapEntry
	24, // 19: spincomm.TaskSpec.Ports:type_name -> spincomm.TaskSpec.PortsEntry
	15, // 20: spincomm.TaskSpec.CargoSpec:type_name -> spincomm.CargoReq
	13, // 21: spincomm.TaskSpec.DataSources:type_name -> spincomm.Location
	7,  // 22: spincomm.TaskLog.HostResourceEntry.value:type_name -> spincomm.ResourceStatus
	7,  // 23: spincomm.NodeInfo.HostResourceEntry.value:type_name -> spincomm.ResourceStatus
	12, // 24: spincomm.TaskSpec.ResourceMapEntry.value:type_name -> spincomm.ResourceRequirement
	2,  // 25: spincomm.Spinner.Attach:input_type -> spincomm.JoinRequest
	5,  // 26: spincomm.Spinner.Run:input_type -> spincomm.TaskLog
	4,  // 27: spincomm.Spinner.Request:input_type -> spincomm.TaskRequest
	10, // 28: spincomm.Spinner.Update:input_type -> spincomm.NodeInfo
	16, // 29: spincomm.Spinner.RegisterScheduler:input_type -> spincomm.SchedulePolicy
	4,  // 30: spincomm.Spinner.Attach:output_type -> spincomm.TaskRequest
	6,  // 31: spincomm.Spinner.Run:output_type -> spincomm.TaskCompletion
	5,  // 32: spincomm.Spinner.Request:output_type -> spincomm.TaskLog
	14, // 33: spincomm.Spinner.Update:output_type -> spincomm.PingResp
	14, // 34: spincomm.Spinner.RegisterScheduler:output_type -> spincomm.PingResp
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_spincomm_proto_init() }
func file_spincomm_proto_init() {
	if File_spincomm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spincomm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostRC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CargoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spincomm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spincomm_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spincomm_proto_goTypes,
		DependencyIndexes: file_spincomm_proto_depIdxs,
		EnumInfos:         file_spincomm_proto_enumTypes,
		MessageInfos:      file_spincomm_proto_msgTypes,
	}.Build()
	File_spincomm_proto = out.File
	file_spincomm_proto_rawDesc = nil
	file_spincomm_proto_goTypes = nil
	file_spincomm_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpinnerClient is the client API for Spinner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpinnerClient interface {
	Attach(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Spinner_AttachClient, error)
	Run(ctx context.Context, opts ...grpc.CallOption) (Spinner_RunClient, error)
	Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Spinner_RequestClient, error)
	Update(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*PingResp, error)
	RegisterScheduler(ctx context.Context, in *SchedulePolicy, opts ...grpc.CallOption) (*PingResp, error)
}

type spinnerClient struct {
	cc grpc.ClientConnInterface
}

func NewSpinnerClient(cc grpc.ClientConnInterface) SpinnerClient {
	return &spinnerClient{cc}
}

func (c *spinnerClient) Attach(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (Spinner_AttachClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Spinner_serviceDesc.Streams[0], "/spincomm.Spinner/Attach", opts...)
	if err != nil {
		return nil, err
	}
	x := &spinnerAttachClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spinner_AttachClient interface {
	Recv() (*TaskRequest, error)
	grpc.ClientStream
}

type spinnerAttachClient struct {
	grpc.ClientStream
}

func (x *spinnerAttachClient) Recv() (*TaskRequest, error) {
	m := new(TaskRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spinnerClient) Run(ctx context.Context, opts ...grpc.CallOption) (Spinner_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Spinner_serviceDesc.Streams[1], "/spincomm.Spinner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &spinnerRunClient{stream}
	return x, nil
}

type Spinner_RunClient interface {
	Send(*TaskLog) error
	CloseAndRecv() (*TaskCompletion, error)
	grpc.ClientStream
}

type spinnerRunClient struct {
	grpc.ClientStream
}

func (x *spinnerRunClient) Send(m *TaskLog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *spinnerRunClient) CloseAndRecv() (*TaskCompletion, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TaskCompletion)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spinnerClient) Request(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (Spinner_RequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Spinner_serviceDesc.Streams[2], "/spincomm.Spinner/Request", opts...)
	if err != nil {
		return nil, err
	}
	x := &spinnerRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Spinner_RequestClient interface {
	Recv() (*TaskLog, error)
	grpc.ClientStream
}

type spinnerRequestClient struct {
	grpc.ClientStream
}

func (x *spinnerRequestClient) Recv() (*TaskLog, error) {
	m := new(TaskLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spinnerClient) Update(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/spincomm.Spinner/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spinnerClient) RegisterScheduler(ctx context.Context, in *SchedulePolicy, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/spincomm.Spinner/RegisterScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpinnerServer is the server API for Spinner service.
type SpinnerServer interface {
	Attach(*JoinRequest, Spinner_AttachServer) error
	Run(Spinner_RunServer) error
	Request(*TaskRequest, Spinner_RequestServer) error
	Update(context.Context, *NodeInfo) (*PingResp, error)
	RegisterScheduler(context.Context, *SchedulePolicy) (*PingResp, error)
}

// UnimplementedSpinnerServer can be embedded to have forward compatible implementations.
type UnimplementedSpinnerServer struct {
}

func (*UnimplementedSpinnerServer) Attach(*JoinRequest, Spinner_AttachServer) error {
	return status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedSpinnerServer) Run(Spinner_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (*UnimplementedSpinnerServer) Request(*TaskRequest, Spinner_RequestServer) error {
	return status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (*UnimplementedSpinnerServer) Update(context.Context, *NodeInfo) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSpinnerServer) RegisterScheduler(context.Context, *SchedulePolicy) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterScheduler not implemented")
}

func RegisterSpinnerServer(s *grpc.Server, srv SpinnerServer) {
	s.RegisterService(&_Spinner_serviceDesc, srv)
}

func _Spinner_Attach_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpinnerServer).Attach(m, &spinnerAttachServer{stream})
}

type Spinner_AttachServer interface {
	Send(*TaskRequest) error
	grpc.ServerStream
}

type spinnerAttachServer struct {
	grpc.ServerStream
}

func (x *spinnerAttachServer) Send(m *TaskRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Spinner_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpinnerServer).Run(&spinnerRunServer{stream})
}

type Spinner_RunServer interface {
	SendAndClose(*TaskCompletion) error
	Recv() (*TaskLog, error)
	grpc.ServerStream
}

type spinnerRunServer struct {
	grpc.ServerStream
}

func (x *spinnerRunServer) SendAndClose(m *TaskCompletion) error {
	return x.ServerStream.SendMsg(m)
}

func (x *spinnerRunServer) Recv() (*TaskLog, error) {
	m := new(TaskLog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Spinner_Request_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpinnerServer).Request(m, &spinnerRequestServer{stream})
}

type Spinner_RequestServer interface {
	Send(*TaskLog) error
	grpc.ServerStream
}

type spinnerRequestServer struct {
	grpc.ServerStream
}

func (x *spinnerRequestServer) Send(m *TaskLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Spinner_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpinnerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spincomm.Spinner/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpinnerServer).Update(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spinner_RegisterScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpinnerServer).RegisterScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spincomm.Spinner/RegisterScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpinnerServer).RegisterScheduler(ctx, req.(*SchedulePolicy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spinner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spincomm.Spinner",
	HandlerType: (*SpinnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Spinner_Update_Handler,
		},
		{
			MethodName: "RegisterScheduler",
			Handler:    _Spinner_RegisterScheduler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Attach",
			Handler:       _Spinner_Attach_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _Spinner_Run_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Request",
			Handler:       _Spinner_Request_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spincomm.proto",
}
